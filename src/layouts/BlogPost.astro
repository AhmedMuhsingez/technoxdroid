---
import BaseLayout from '@/layouts/BaseLayout'
import { Image } from 'astro:assets'
import FormattedDate from '@/components/FormattedDate'
import { cn } from 'src/utils/utils'
import SimilarArticles from '@/components/SimilarArticles'
import { siteConfig } from '@/data/site.config'
type Props = {
	data: ArticleAttributes
	similarArticles: ArticleData[]
}

const { data, similarArticles } = Astro.props
const { title, description, publishedAt, cover, slug } = data
const hasCategory = data.category.data != null

const category = hasCategory ? data.category.data.attributes.name : 'آخر الأخبار التقنية'
const coverImage = cover.data.attributes.formats.large.url
const articleAuthor = data.author.data.attributes.name
const isMovies = hasCategory && data.category.data.attributes.slug.includes('movies-and-shows')

const similarArticlesResponse = similarArticles.filter(
	(article: ArticleData) => !article.attributes.isShortNews && article.attributes.slug !== slug
)
---

<BaseLayout title={title} description={description} image={coverImage} articleDate={publishedAt}>
	<article class='md:max-w-[840px] mt-8 flex flex-col justify-self-center'>
		<header class='flex flex-col justify-center items-center gap-6'>
			<div class='flex flex-col gap-2'>
				<h1 class='text-center text-3xl md:text-5xl font-semibold' style={{ lineHeight: 1.4 }}>
					{title}
				</h1>
			</div>
		</header>

		<div id='category' class='flex flex-wrap justify-center items-center gap-2 gap-y-4 md:gap-5'>
			<div
				class={cn(
					'my-6 cursor-no-drop select-none bg-action-active dark:bg-action-activeDark font-semibold text-white dark:text-white shadow text-sm w-fit px-4 py-1 rounded-full',
					isMovies && 'bg-movies-active dark:bg-movies-activeDark'
				)}
			>
				{category}
			</div>
		</div>

		<Image
			src={coverImage || siteConfig.missingImagePlaceHolder}
			width={1000}
			height={500}
			quality={100}
			format='jpg'
			loading='eager'
			class='rounded-md w-full max-h-[300px] md:max-h-[500px] mb-6 object-cover'
			alt={`صورة ${title}`}
		/>
		<info
			id='article-info'
			class='text-md flex md:flex-row-reverse flex-col justify-between items-center md:items-start py-4 gap-2 border-t-2 dark:border-t px-4'
		>
			<div class='flex gap-x-1'>
				<p class='text-center flex'>
					تم النشر في
					<FormattedDate date={publishedAt} insidePost={true} />
				</p>
			</div>

			<div class='flex'>
				<div>كاتب المقال:</div>
				<div
					class={cn(
						'font-bold text-action-active dark:text-action-activeDark px-1 cursor-no-drop',
						isMovies && 'text-movies-active dark:text-movies-activeDark'
					)}
				>
					{articleAuthor}
				</div>
			</div>
		</info>
		<hr />

		<div class='py-6'>
			<slot />
		</div>

		{
			similarArticlesResponse.length > 0 && (
				<div id='similar-articles-footer' class='border-t-2 dark:border-t py-4 flex flex-col gap-4'>
					<span class='text-xl font-semibold'>المزيد من مقالات {category}</span>
					<SimilarArticles similarArticles={similarArticlesResponse} slug={slug} />
				</div>
			)
		}
	</article>
</BaseLayout>

<script>
	const fnObserver = () => {
		function handleIntersection(
			entries: IntersectionObserverEntry[],
			observer: IntersectionObserver
		) {
			entries.forEach((entry) => {
				const index = document.querySelector(`aside a[href="#${entry.target.id}"]`)

				if (entry.isIntersecting) {
					index?.classList.remove('bg-slate-200', 'dark:bg-slate-800') // remove bg
					index?.classList.add(
						'bg-indigo-600',
						'dark:bg-indigo-700',
						'text-white',
						'font-bold',
						'transition-colors',
						'duration-200'
					)
				} else {
					index?.classList.add('bg-slate-200', 'dark:bg-slate-800') // add bg
					index?.classList.remove(
						'bg-indigo-600',
						'dark:bg-indigo-700',
						'text-white',
						'font-bold',
						'transition-colors',
						'duration-200'
					)
				}
			})
		}

		const headings = document.querySelectorAll(
			'div.prose h1, div.prose h2, div.prose h3, div.prose h4, div.prose h5, div.prose h6'
		)

		const options = {
			root: null,
			rootMargin: ' 15% 0px 0% 0px ',
			threshold: 1
		}

		const observer = new IntersectionObserver(handleIntersection, options)

		headings.forEach((heading) => {
			observer.observe(heading)
		})
	}
	fnObserver()
	document.addEventListener('astro:after-swap', fnObserver)
</script>
