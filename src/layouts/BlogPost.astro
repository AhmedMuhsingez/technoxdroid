---
import BaseLayout from '@/layouts/BaseLayout'
import Tag from '@/components/Tag'
import { Image } from 'astro:assets'
import FormattedDate from '@/components/FormattedDate'

type Props = {
	data: ArticleAttributes
}

const { data } = Astro.props
const { title, description, publishedAt, cover, Tags } = data
const category = data.category.data.attributes.name
const coverImage = cover.data.attributes.formats.large.url
---

<BaseLayout title={title} description={description} image={coverImage} articleDate={publishedAt}>
	<article class='min-w-full md:py-4 sm:max-w-none md:max-w-none'>
		<header class='mb-3 flex flex-col justify-center items-center gap-6'>
			<div class='flex flex-col gap-2'>
				<div class='flex items-center justify-center gap-x-1'>
					<p class='text-center text-sm text-opacity-50'>
						<time class='text-sm font-bold text-opacity-60'>
							تم النشر في <FormattedDate date={publishedAt} insidePost={true} /></time
						>
					</p>
				</div>
				<h1 class='text-center text-4xl md:text-6xl font-semibold' style={{ lineHeight: 1.4 }}>
					{title}
				</h1>
			</div>
		</header>

		<div class='flex flex-wrap justify-center items-center gap-2 gap-y-4 md:gap-5'>
			<div
				class='cursor-no-drop select-none bg-indigo-600 font-semibold text-white dark:bg-indigo-900 dark:text-white shadow text-sm w-fit px-2 py-1 md:px-5 md:py-2 rounded-full'
			>
				{category}
			</div>
		</div>

		<Image
			src={coverImage}
			width={1000}
			height={500}
			quality={100}
			format='jpg'
			loading='eager'
			class='rounded-md w-full max-h-[300px] md:max-h-[500px] my-8 object-cover'
			alt={`صورة ${title}`}
		/>

		<hr />

		<div class='pt-4'>
			<slot />
		</div>
	</article>
</BaseLayout>

<script>
	const fnObserver = () => {
		function handleIntersection(
			entries: IntersectionObserverEntry[],
			observer: IntersectionObserver
		) {
			entries.forEach((entry) => {
				const index = document.querySelector(`aside a[href="#${entry.target.id}"]`)

				if (entry.isIntersecting) {
					index?.classList.remove('bg-slate-200', 'dark:bg-slate-800') // remove bg
					index?.classList.add(
						'bg-indigo-600',
						'dark:bg-indigo-700',
						'text-white',
						'font-bold',
						'transition-colors',
						'duration-200'
					)
				} else {
					index?.classList.add('bg-slate-200', 'dark:bg-slate-800') // add bg
					index?.classList.remove(
						'bg-indigo-600',
						'dark:bg-indigo-700',
						'text-white',
						'font-bold',
						'transition-colors',
						'duration-200'
					)
				}
			})
		}

		const headings = document.querySelectorAll(
			'div.prose h1, div.prose h2, div.prose h3, div.prose h4, div.prose h5, div.prose h6'
		)

		const options = {
			root: null,
			rootMargin: ' 15% 0px 0% 0px ',
			threshold: 1
		}

		const observer = new IntersectionObserver(handleIntersection, options)

		headings.forEach((heading) => {
			observer.observe(heading)
		})
	}
	fnObserver()
	document.addEventListener('astro:after-swap', fnObserver)
</script>
